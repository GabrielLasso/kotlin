/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link GenerateNewCompilerTests.kt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/multiModuleOrder")
@TestDataPath("$PROJECT_ROOT")
public class MultiModuleOrderTestGenerated extends AbstractMultiModuleOrderTest {
    @Test
    public void testAllFilesPresentInMultiModuleOrder() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
    }

    @Test
    @TestMetadata("plain.kt")
    public void testPlain() throws Exception {
        runTest("js/js.translator/testData/multiModuleOrder/plain.kt");
    }

    @Test
    @TestMetadata("umd.kt")
    public void testUmd() throws Exception {
        runTest("js/js.translator/testData/multiModuleOrder/umd.kt");
    }

    @Nested
    @TestMetadata("js/js.translator/testData/multiModuleOrder/out")
    @TestDataPath("$PROJECT_ROOT")
    public class Out {
        @Test
        public void testAllFilesPresentInOut() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
        }

        @Nested
        @TestMetadata("js/js.translator/testData/multiModuleOrder/out/lib")
        @TestDataPath("$PROJECT_ROOT")
        public class Lib {
            @Test
            public void testAllFilesPresentInLib() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/lib"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
            }

            @Nested
            @TestMetadata("js/js.translator/testData/multiModuleOrder/out/lib/kotlin")
            @TestDataPath("$PROJECT_ROOT")
            public class Kotlin {
                @Test
                public void testAllFilesPresentInKotlin() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/lib/kotlin"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
                }
            }

            @Nested
            @TestMetadata("js/js.translator/testData/multiModuleOrder/out/lib/lib")
            @TestDataPath("$PROJECT_ROOT")
            public class Lib {
                @Test
                public void testAllFilesPresentInLib() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/lib/lib"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
                }
            }
        }

        @Nested
        @TestMetadata("js/js.translator/testData/multiModuleOrder/out/main")
        @TestDataPath("$PROJECT_ROOT")
        public class Main {
            @Test
            public void testAllFilesPresentInMain() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/main"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
            }

            @Nested
            @TestMetadata("js/js.translator/testData/multiModuleOrder/out/main/foo")
            @TestDataPath("$PROJECT_ROOT")
            public class Foo {
                @Test
                public void testAllFilesPresentInFoo() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/main/foo"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
                }
            }

            @Nested
            @TestMetadata("js/js.translator/testData/multiModuleOrder/out/main/kotlin")
            @TestDataPath("$PROJECT_ROOT")
            public class Kotlin {
                @Test
                public void testAllFilesPresentInKotlin() throws Exception {
                    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/multiModuleOrder/out/main/kotlin"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JS, true);
                }
            }
        }
    }
}
